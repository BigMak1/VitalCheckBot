from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    CallbackQueryHandler
)
import logging
import json
import os
from datetime import datetime

from src.retriever import RagService
from src.llm import LLMService

rag_service = RagService()
llm_service = LLMService(rag_service)

logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
STATS_FILE = "feedback_stats.json"
DISLIKES_FILE = "disliked_responses.json"


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r") as f:
            return json.load(f)
    return {"likes": 0, "dislikes": 0}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
def save_stats(stats):
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def load_dislikes():
    if os.path.exists(DISLIKES_FILE):
        with open(DISLIKES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def save_dislike(question, answer, user_id, username):
    dislikes = load_dislikes()
    dislikes.append({
        "question": question,
        "answer": answer,
        "user_id": user_id,
        "username": username,
        "timestamp": datetime.now().isoformat()
    })
    with open(DISLIKES_FILE, "w", encoding="utf-8") as f:
        json.dump(dislikes, f, ensure_ascii=False, indent=2)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"Update: {update} caused error: {context.error}")
    if update and update.message:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º. –°–µ–π—á–∞—Å —è –∑–Ω–∞—é –≤—Å–µ, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ–ø–∏—Å–∫–∞–º–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å üëç –∏–ª–∏ üëé, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
    )
    await update.message.reply_text(welcome_message)


async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤)."""
    question = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["last_question"] = question

    answer = llm_service.generate_answer(question)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
    keyboard = [
        [InlineKeyboardButton("üëç", callback_data=f"like_{answer[:10]}"),
         InlineKeyboardButton("üëé", callback_data=f"dislike_{answer[:10]}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    sent_message = await update.message.reply_text(answer, reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["last_answer"] = answer
    context.user_data["last_user_id"] = user_id
    context.user_data["last_username"] = username


async def handle_feedback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ñ–∏–¥–±–µ–∫–∞ (–ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫) –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞
    feedback_type, answer_id = query.data.split("_")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_stats()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if feedback_type == "like":
        stats["likes"] += 1
    elif feedback_type == "dislike":
        stats["dislikes"] += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
        if "last_question" in context.user_data and "last_answer" in context.user_data:
            question = context.user_data.get("last_question", "")
            answer = context.user_data.get("last_answer", "")
            user_id = context.user_data.get("last_user_id", query.from_user.id)
            username = context.user_data.get("last_username", query.from_user.username or query.from_user.first_name)
            save_dislike(question, answer, user_id, username)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_stats(stats)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await query.edit_message_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∑–∞ —Ñ–∏–¥–±–µ–∫
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ñ–∏–¥–±–µ–∫! üéâ\n(–õ–∞–π–∫–æ–≤: {stats['likes']}, –î–∏–∑–ª–∞–π–∫–æ–≤: {stats['dislikes']})"
    )


async def get_disliked_responses(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID)
    admin_ids = [12345, 67890]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    dislikes = load_dislikes()
    if not dislikes:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for i, dislike in enumerate(dislikes[-5:], 1):
        date = datetime.fromisoformat(dislike["timestamp"]).strftime("%d.%m.%Y %H:%M")
        response += f"{i}. –î–∞—Ç–∞: {date}\n"
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {dislike['username']} (ID: {dislike['user_id']})\n"
        response += f"–í–æ–ø—Ä–æ—Å: {dislike['question']}\n"
        response += f"–û—Ç–≤–µ—Ç: {dislike['answer'][:100]}...\n\n"

    await update.message.reply_text(response)


def setup_handlers(application):
    """–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("dislikes", get_disliked_responses))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_feedback))
    application.add_error_handler(error)